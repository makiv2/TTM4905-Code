use rocket::serde::json::Json;
use crate::models::{NewProof, Proof, ProofQueryResult};
use crate::repository::ZkRepository;
use crate::services::ZkService;

impl ZkService {
    pub fn new(zk_repository: ZkRepository) -> Self {
        ZkService { zk_repository }
    }

    pub async fn generate_proof(&mut self, new_proof: Json<NewProof>) -> Proof {
        // Her kan vi har mer logic før vi sender til repository (database) // TODO ID should be generated by the database
        // GENERERE PROOF HER MED ZK
        
        let proof = Proof {
            id: None,
            proof: new_proof.proof.to_string(),
            company: new_proof.company.to_string(),
            message: new_proof.message.to_string(),
        };

        let created_proof = self.zk_repository.save_proof(proof).await;

        return created_proof;
    }

    pub async fn get_proofs(&mut self) -> Result<Vec<ProofQueryResult>, &'static str> {
        // Her kan vi har mer logic før vi sender til repository (database) 

        return self.zk_repository.get_proofs().await
    }

    pub async fn get_proof(&mut self, id: i32) -> Result<ProofQueryResult, &'static str> {
        // Her kan vi har mer logic før vi sender til repository (database) 

        return self.zk_repository.get_proof(id).await
    }

    // pub async fn update_user(&mut self, id: i32, updated_user: User) -> Result<User, &'static str> {
    //     // Her kan vi har mer logic før vi sender til repository (database) 
    //     
    //     return self.user_repository.update_user(id, updated_user).await
    // }
}
